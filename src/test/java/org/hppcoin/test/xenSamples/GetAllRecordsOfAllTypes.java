/*
 * Copyright (c) Citrix Systems, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   1) Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *   2) Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.hppcoin.test.xenSamples;
import java.util.Map;

import com.xensource.xenapi.*;

/**
 * Retrieves and prints out records for all the available API objects.
 * This file is autogenerated.
 */
public class GetAllRecordsOfAllTypes extends TestBase
{
    public String getTestName() {
        return "GetAllRecordsOfAllTypes";
    }

    protected void TestCore() throws Exception
    {
        log("We'll try to retrieve all the records for all types of objects");
        log("This should exercise most of the marshalling code");

        testBlobRecords();
        testBondRecords();
        testClusterRecords();
        testClusterHostRecords();
        testConsoleRecords();
        testCrashdumpRecords();
        testDRTaskRecords();
        testFeatureRecords();
        testGPUGroupRecords();
        testHostRecords();
        testHostCpuRecords();
        testHostCrashdumpRecords();
        testHostMetricsRecords();
        testHostPatchRecords();
        testMessageRecords();
        testNetworkRecords();
        testNetworkSriovRecords();
        testPBDRecords();
        testPCIRecords();
        testPGPURecords();
        testPIFRecords();
        testPIFMetricsRecords();
        testPUSBRecords();
        testPVSCacheStorageRecords();
        testPVSProxyRecords();
        testPVSServerRecords();
        testPVSSiteRecords();
        testPoolRecords();
        testPoolPatchRecords();
        testPoolUpdateRecords();
        testRoleRecords();
        testSDNControllerRecords();
        testSMRecords();
        testSRRecords();
        testSecretRecords();
        testSubjectRecords();
        testTaskRecords();
        testTunnelRecords();
        testUSBGroupRecords();
        testVBDRecords();
        testVDIRecords();
        testVGPURecords();
        testVGPUTypeRecords();
        testVIFRecords();
        testVLANRecords();
        testVMRecords();
        testVMApplianceRecords();
        testVMGuestMetricsRecords();
        testVMMetricsRecords();
        testVMSSRecords();
        testVUSBRecords();
    }

    private void testBlobRecords() throws Exception
    {
        announce("Get all the Blob records");
        Map<Blob, Blob.Record> allrecords = Blob.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first Blob record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testBondRecords() throws Exception
    {
        announce("Get all the Bond records");
        Map<Bond, Bond.Record> allrecords = Bond.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first Bond record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testClusterRecords() throws Exception
    {
        announce("Get all the Cluster records");
        Map<Cluster, Cluster.Record> allrecords = Cluster.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first Cluster record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testClusterHostRecords() throws Exception
    {
        announce("Get all the ClusterHost records");
        Map<ClusterHost, ClusterHost.Record> allrecords = ClusterHost.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first ClusterHost record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testConsoleRecords() throws Exception
    {
        announce("Get all the Console records");
        Map<Console, Console.Record> allrecords = Console.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first Console record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testCrashdumpRecords() throws Exception
    {
        announce("Get all the Crashdump records");
        Map<Crashdump, Crashdump.Record> allrecords = Crashdump.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first Crashdump record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testDRTaskRecords() throws Exception
    {
        announce("Get all the DRTask records");
        Map<DRTask, DRTask.Record> allrecords = DRTask.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first DRTask record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testFeatureRecords() throws Exception
    {
        announce("Get all the Feature records");
        Map<Feature, Feature.Record> allrecords = Feature.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first Feature record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testGPUGroupRecords() throws Exception
    {
        announce("Get all the GPUGroup records");
        Map<GPUGroup, GPUGroup.Record> allrecords = GPUGroup.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first GPUGroup record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testHostRecords() throws Exception
    {
        announce("Get all the Host records");
        Map<Host, Host.Record> allrecords = Host.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first Host record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testHostCpuRecords() throws Exception
    {
        announce("Get all the HostCpu records");
        Map<HostCpu, HostCpu.Record> allrecords = HostCpu.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first HostCpu record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testHostCrashdumpRecords() throws Exception
    {
        announce("Get all the HostCrashdump records");
        Map<HostCrashdump, HostCrashdump.Record> allrecords = HostCrashdump.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first HostCrashdump record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testHostMetricsRecords() throws Exception
    {
        announce("Get all the HostMetrics records");
        Map<HostMetrics, HostMetrics.Record> allrecords = HostMetrics.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first HostMetrics record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testHostPatchRecords() throws Exception
    {
        announce("Get all the HostPatch records");
        Map<HostPatch, HostPatch.Record> allrecords = HostPatch.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first HostPatch record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testMessageRecords() throws Exception
    {
        announce("Get all the Message records");
        Map<Message, Message.Record> allrecords = Message.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first Message record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testNetworkRecords() throws Exception
    {
        announce("Get all the Network records");
        Map<Network, Network.Record> allrecords = Network.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first Network record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testNetworkSriovRecords() throws Exception
    {
        announce("Get all the NetworkSriov records");
        Map<NetworkSriov, NetworkSriov.Record> allrecords = NetworkSriov.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first NetworkSriov record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testPBDRecords() throws Exception
    {
        announce("Get all the PBD records");
        Map<PBD, PBD.Record> allrecords = PBD.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first PBD record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testPCIRecords() throws Exception
    {
        announce("Get all the PCI records");
        Map<PCI, PCI.Record> allrecords = PCI.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first PCI record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testPGPURecords() throws Exception
    {
        announce("Get all the PGPU records");
        Map<PGPU, PGPU.Record> allrecords = PGPU.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first PGPU record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testPIFRecords() throws Exception
    {
        announce("Get all the PIF records");
        Map<PIF, PIF.Record> allrecords = PIF.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first PIF record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testPIFMetricsRecords() throws Exception
    {
        announce("Get all the PIFMetrics records");
        Map<PIFMetrics, PIFMetrics.Record> allrecords = PIFMetrics.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first PIFMetrics record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testPUSBRecords() throws Exception
    {
        announce("Get all the PUSB records");
        Map<PUSB, PUSB.Record> allrecords = PUSB.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first PUSB record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testPVSCacheStorageRecords() throws Exception
    {
        announce("Get all the PVSCacheStorage records");
        Map<PVSCacheStorage, PVSCacheStorage.Record> allrecords = PVSCacheStorage.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first PVSCacheStorage record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testPVSProxyRecords() throws Exception
    {
        announce("Get all the PVSProxy records");
        Map<PVSProxy, PVSProxy.Record> allrecords = PVSProxy.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first PVSProxy record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testPVSServerRecords() throws Exception
    {
        announce("Get all the PVSServer records");
        Map<PVSServer, PVSServer.Record> allrecords = PVSServer.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first PVSServer record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testPVSSiteRecords() throws Exception
    {
        announce("Get all the PVSSite records");
        Map<PVSSite, PVSSite.Record> allrecords = PVSSite.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first PVSSite record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testPoolRecords() throws Exception
    {
        announce("Get all the Pool records");
        Map<Pool, Pool.Record> allrecords = Pool.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first Pool record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testPoolPatchRecords() throws Exception
    {
        announce("Get all the PoolPatch records");
        Map<PoolPatch, PoolPatch.Record> allrecords = PoolPatch.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first PoolPatch record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testPoolUpdateRecords() throws Exception
    {
        announce("Get all the PoolUpdate records");
        Map<PoolUpdate, PoolUpdate.Record> allrecords = PoolUpdate.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first PoolUpdate record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testRoleRecords() throws Exception
    {
        announce("Get all the Role records");
        Map<Role, Role.Record> allrecords = Role.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first Role record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testSDNControllerRecords() throws Exception
    {
        announce("Get all the SDNController records");
        Map<SDNController, SDNController.Record> allrecords = SDNController.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first SDNController record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testSMRecords() throws Exception
    {
        announce("Get all the SM records");
        Map<SM, SM.Record> allrecords = SM.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first SM record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testSRRecords() throws Exception
    {
        announce("Get all the SR records");
        Map<SR, SR.Record> allrecords = SR.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first SR record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testSecretRecords() throws Exception
    {
        announce("Get all the Secret records");
        Map<Secret, Secret.Record> allrecords = Secret.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first Secret record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testSubjectRecords() throws Exception
    {
        announce("Get all the Subject records");
        Map<Subject, Subject.Record> allrecords = Subject.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first Subject record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testTaskRecords() throws Exception
    {
        announce("Get all the Task records");
        Map<Task, Task.Record> allrecords = Task.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first Task record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testTunnelRecords() throws Exception
    {
        announce("Get all the Tunnel records");
        Map<Tunnel, Tunnel.Record> allrecords = Tunnel.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first Tunnel record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testUSBGroupRecords() throws Exception
    {
        announce("Get all the USBGroup records");
        Map<USBGroup, USBGroup.Record> allrecords = USBGroup.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first USBGroup record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testVBDRecords() throws Exception
    {
        announce("Get all the VBD records");
        Map<VBD, VBD.Record> allrecords = VBD.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first VBD record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testVDIRecords() throws Exception
    {
        announce("Get all the VDI records");
        Map<VDI, VDI.Record> allrecords = VDI.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first VDI record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testVGPURecords() throws Exception
    {
        announce("Get all the VGPU records");
        Map<VGPU, VGPU.Record> allrecords = VGPU.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first VGPU record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testVGPUTypeRecords() throws Exception
    {
        announce("Get all the VGPUType records");
        Map<VGPUType, VGPUType.Record> allrecords = VGPUType.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first VGPUType record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testVIFRecords() throws Exception
    {
        announce("Get all the VIF records");
        Map<VIF, VIF.Record> allrecords = VIF.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first VIF record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testVLANRecords() throws Exception
    {
        announce("Get all the VLAN records");
        Map<VLAN, VLAN.Record> allrecords = VLAN.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first VLAN record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testVMRecords() throws Exception
    {
        announce("Get all the VM records");
        Map<VM, VM.Record> allrecords = VM.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first VM record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testVMApplianceRecords() throws Exception
    {
        announce("Get all the VMAppliance records");
        Map<VMAppliance, VMAppliance.Record> allrecords = VMAppliance.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first VMAppliance record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testVMGuestMetricsRecords() throws Exception
    {
        announce("Get all the VMGuestMetrics records");
        Map<VMGuestMetrics, VMGuestMetrics.Record> allrecords = VMGuestMetrics.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first VMGuestMetrics record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testVMMetricsRecords() throws Exception
    {
        announce("Get all the VMMetrics records");
        Map<VMMetrics, VMMetrics.Record> allrecords = VMMetrics.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first VMMetrics record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testVMSSRecords() throws Exception
    {
        announce("Get all the VMSS records");
        Map<VMSS, VMSS.Record> allrecords = VMSS.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first VMSS record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

    private void testVUSBRecords() throws Exception
    {
        announce("Get all the VUSB records");
        Map<VUSB, VUSB.Record> allrecords = VUSB.getAllRecords(connection);
        log("Got: " + allrecords.size() + " records");
        if (allrecords.size() > 0)
        {
            log("Printing out the first VUSB record:");
            log(allrecords.values().toArray()[0].toString());
        }
        log("");
    }

}
